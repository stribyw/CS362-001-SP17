/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 19:02:54 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
//import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.arrayManip;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

/*@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)*/ 
public class arrayManip_ESTest {

  //Test case number: 0
  /*
   * 23 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false
   * Goal 2. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - true
   * Goal 3. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - true
   * Goal 4. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 5. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 6. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 7. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 96
   * Goal 8. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 98
   * Goal 9. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 106
   * Goal 10. [METHOD] edu.osu.cs362.arrayManip.findAndPrintPairs([II)V
   * Goal 11. [METHODNOEX] edu.osu.cs362.arrayManip.findAndPrintPairs([II)V
   * Goal 12. Weak Mutation 309: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - InsertUnaryOp Negation
   * Goal 13. Weak Mutation 310: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != -> ==
   * Goal 14. Weak Mutation 311: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != null -> = null
   * Goal 15. Weak Mutation 313: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 0
   * Goal 16. Weak Mutation 314: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 1
   * Goal 17. Weak Mutation 315: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> -1
   * Goal 18. Weak Mutation 316: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 3
   * Goal 19. Weak Mutation 317: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceVariable i -> target
   * Goal 20. Weak Mutation 318: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp Negation of i
   * Goal 21. Weak Mutation 319: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC 1 i
   * Goal 22. Weak Mutation 320: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC -1 i
   * Goal 23. Weak Mutation 323: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceComparisonOperator >= -> ==
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      arrayManip.findAndPrintPairs(intArray0, (-990));
      assertArrayEquals(new int[] {}, intArray0);
  }

  //Test case number: 1
  /*
   * 22 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false
   * Goal 2. edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - false
   * Goal 3. edu.osu.cs362.arrayManip.badResize([II)V: I7 Branch 8 IFGE L54 - true
   * Goal 4. Branch edu.osu.cs362.arrayManip.badResize([II)V: I7 Branch 8 IFGE L54 - true in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 5. Branch edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 6. Branch edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 7. badResize([II)V_java.lang.NullPointerException_IMPLICIT
   * Goal 8. edu.osu.cs362.arrayManip.badResize([II)V: Line 54
   * Goal 9. edu.osu.cs362.arrayManip.badResize([II)V: Line 56
   * Goal 10. edu.osu.cs362.arrayManip.badResize([II)V: Line 57
   * Goal 11. [METHOD] edu.osu.cs362.arrayManip.badResize([II)V
   * Goal 12. Weak Mutation 218: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation
   * Goal 13. Weak Mutation 219: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != -> ==
   * Goal 14. Weak Mutation 220: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != null -> = null
   * Goal 15. Weak Mutation 221: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation of newSize
   * Goal 16. Weak Mutation 222: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp IINC 1 newSize
   * Goal 17. Weak Mutation 223: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp IINC -1 newSize
   * Goal 18. Weak Mutation 225: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator >= -> ==
   * Goal 19. Weak Mutation 228: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp Negation of newSize
   * Goal 20. Weak Mutation 229: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC 1 newSize
   * Goal 21. Weak Mutation 230: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC -1 newSize
   * Goal 22. Weak Mutation 231: edu.osu.cs362.arrayManip.badResize([II)V:57 - ReplaceVariable list -> temp
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.badResize((int[]) null, 524);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("edu.osu.cs362.arrayManip", e);
      }
  }

  //Test case number: 2
  /*
   * 46 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false
   * Goal 2. edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - false
   * Goal 3. edu.osu.cs362.arrayManip.findMin([I)I: I8 Branch 3 IFGT L34 - true
   * Goal 4. edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - true
   * Goal 5. edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - false
   * Goal 6. edu.osu.cs362.arrayManip.findMin([I)I: I36 Branch 5 IF_ICMPGE L38 - true
   * Goal 7. Branch edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 8. Branch edu.osu.cs362.arrayManip.findMin([I)I: I8 Branch 3 IFGT L34 - true in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 9. Branch edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 10. Branch edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - true in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 11. Branch edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 12. Branch edu.osu.cs362.arrayManip.findMin([I)I: I36 Branch 5 IF_ICMPGE L38 - true in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 13. [Output]: edu.osu.cs362.arrayManip.findMin([I)I:Zero
   * Goal 14. edu.osu.cs362.arrayManip.findMin([I)I: Line 34
   * Goal 15. edu.osu.cs362.arrayManip.findMin([I)I: Line 36
   * Goal 16. edu.osu.cs362.arrayManip.findMin([I)I: Line 37
   * Goal 17. edu.osu.cs362.arrayManip.findMin([I)I: Line 38
   * Goal 18. edu.osu.cs362.arrayManip.findMin([I)I: Line 43
   * Goal 19. [METHOD] edu.osu.cs362.arrayManip.findMin([I)I
   * Goal 20. [METHODNOEX] edu.osu.cs362.arrayManip.findMin([I)I
   * Goal 21. Weak Mutation 183: edu.osu.cs362.arrayManip.findMin([I)I:34 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 184: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator != -> ==
   * Goal 23. Weak Mutation 185: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator = null -> != null
   * Goal 24. Weak Mutation 186: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator > -> -2
   * Goal 25. Weak Mutation 190: edu.osu.cs362.arrayManip.findMin([I)I:36 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 191: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 192: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceVariable i -> indexOfMin
   * Goal 28. Weak Mutation 193: edu.osu.cs362.arrayManip.findMin([I)I:37 - InsertUnaryOp Negation of i
   * Goal 29. Weak Mutation 194: edu.osu.cs362.arrayManip.findMin([I)I:37 - InsertUnaryOp IINC 1 i
   * Goal 30. Weak Mutation 195: edu.osu.cs362.arrayManip.findMin([I)I:37 - InsertUnaryOp IINC -1 i
   * Goal 31. Weak Mutation 196: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceComparisonOperator >= -> -1
   * Goal 32. Weak Mutation 197: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceComparisonOperator >= -> >
   * Goal 33. Weak Mutation 214: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceVariable i -> indexOfMin
   * Goal 34. Weak Mutation 199: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceVariable i -> indexOfMin
   * Goal 35. Weak Mutation 200: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp Negation of i
   * Goal 36. Weak Mutation 201: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC 1 i
   * Goal 37. Weak Mutation 202: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC -1 i
   * Goal 38. Weak Mutation 203: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceVariable indexOfMin -> i
   * Goal 39. Weak Mutation 204: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp Negation of indexOfMin
   * Goal 40. Weak Mutation 205: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC 1 indexOfMin
   * Goal 41. Weak Mutation 206: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC -1 indexOfMin
   * Goal 42. Weak Mutation 208: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceComparisonOperator >= -> >
   * Goal 43. Weak Mutation 209: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceComparisonOperator >= -> ==
   * Goal 44. Weak Mutation 215: edu.osu.cs362.arrayManip.findMin([I)I:43 - InsertUnaryOp Negation of indexOfMin
   * Goal 45. Weak Mutation 216: edu.osu.cs362.arrayManip.findMin([I)I:43 - InsertUnaryOp IINC 1 indexOfMin
   * Goal 46. Weak Mutation 217: edu.osu.cs362.arrayManip.findMin([I)I:43 - InsertUnaryOp IINC -1 indexOfMin
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = 990;
      int int0 = arrayManip.findMin(intArray0);
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * Goal 1. showList([I)V_java.lang.NullPointerException_IMPLICIT
   * Goal 2. edu.osu.cs362.arrayManip.showList([I)V: Line 138
   * Goal 3. [METHOD] edu.osu.cs362.arrayManip.showList([I)V
   * Goal 4. Weak Mutation 513: edu.osu.cs362.arrayManip.showList([I)V:138 - ReplaceConstant - 0 -> 1
   * Goal 5. Weak Mutation 514: edu.osu.cs362.arrayManip.showList([I)V:138 - InsertUnaryOp Negation of i
   * Goal 6. Weak Mutation 515: edu.osu.cs362.arrayManip.showList([I)V:138 - InsertUnaryOp IINC 1 i
   * Goal 7. Weak Mutation 516: edu.osu.cs362.arrayManip.showList([I)V:138 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.showList((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("edu.osu.cs362.arrayManip", e);
      }
  }

  //Test case number: 4
  /*
   * 16 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false
   * Goal 2. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 3. isAscending([I)Z_java.lang.NullPointerException_IMPLICIT
   * Goal 4. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 147
   * Goal 5. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 148
   * Goal 6. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 149
   * Goal 7. [METHOD] edu.osu.cs362.arrayManip.isAscending([I)Z
   * Goal 8. Weak Mutation 524: edu.osu.cs362.arrayManip.isAscending([I)Z:147 - ReplaceConstant - 1 -> 0
   * Goal 9. Weak Mutation 525: edu.osu.cs362.arrayManip.isAscending([I)Z:148 - ReplaceConstant - 1 -> 0
   * Goal 10. Weak Mutation 526: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of ascending
   * Goal 11. Weak Mutation 527: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 ascending
   * Goal 12. Weak Mutation 528: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 ascending
   * Goal 13. Weak Mutation 529: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator == -> !=
   * Goal 14. Weak Mutation 530: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of index
   * Goal 15. Weak Mutation 531: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 index
   * Goal 16. Weak Mutation 532: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 index
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.isAscending((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("edu.osu.cs362.arrayManip", e);
      }
  }

  //Test case number: 5
  /*
   * 128 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false
   * Goal 2. edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false
   * Goal 3. edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - true
   * Goal 4. edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - true
   * Goal 5. edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - false
   * Goal 6. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false
   * Goal 7. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - true
   * Goal 8. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - false
   * Goal 9. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - true
   * Goal 10. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - false
   * Goal 11. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - true
   * Goal 12. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 13. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 14. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - true in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 15. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - true in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 16. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 17. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 18. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 19. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 20. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 21. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 22. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 23. findAndPrintPairs([II)V_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 24. [Output]: edu.osu.cs362.arrayManip.goodResize([II)[I:NonEmptyArray
   * Goal 25. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 96
   * Goal 26. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 98
   * Goal 27. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 99
   * Goal 28. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 100
   * Goal 29. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 77
   * Goal 30. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 79
   * Goal 31. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 80
   * Goal 32. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 82
   * Goal 33. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 83
   * Goal 34. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 86
   * Goal 35. [METHOD] edu.osu.cs362.arrayManip.findAndPrintPairs([II)V
   * Goal 36. [METHOD] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 37. [METHODNOEX] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 38. Weak Mutation 263: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 264: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator != -> ==
   * Goal 40. Weak Mutation 265: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator = null -> != null
   * Goal 41. Weak Mutation 266: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation of newSize
   * Goal 42. Weak Mutation 267: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC 1 newSize
   * Goal 43. Weak Mutation 268: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC -1 newSize
   * Goal 44. Weak Mutation 270: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator >= -> ==
   * Goal 45. Weak Mutation 273: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp Negation of newSize
   * Goal 46. Weak Mutation 274: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp IINC 1 newSize
   * Goal 47. Weak Mutation 275: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp IINC -1 newSize
   * Goal 48. Weak Mutation 276: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - ReplaceVariable list -> result
   * Goal 49. Weak Mutation 277: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp Negation of newSize
   * Goal 50. Weak Mutation 278: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp IINC 1 newSize
   * Goal 51. Weak Mutation 279: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp IINC -1 newSize
   * Goal 52. Weak Mutation 280: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceConstant - 0 -> 1
   * Goal 53. Weak Mutation 281: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> limit
   * Goal 54. Weak Mutation 282: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> newSize
   * Goal 55. Weak Mutation 283: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp Negation of i
   * Goal 56. Weak Mutation 284: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC 1 i
   * Goal 57. Weak Mutation 285: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC -1 i
   * Goal 58. Weak Mutation 286: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable limit -> i
   * Goal 59. Weak Mutation 287: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable limit -> newSize
   * Goal 60. Weak Mutation 288: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp Negation of limit
   * Goal 61. Weak Mutation 289: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC 1 limit
   * Goal 62. Weak Mutation 290: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC -1 limit
   * Goal 63. Weak Mutation 291: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceComparisonOperator >= -> -1
   * Goal 64. Weak Mutation 292: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceComparisonOperator >= -> >
   * Goal 65. Weak Mutation 306: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> limit
   * Goal 66. Weak Mutation 307: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> newSize
   * Goal 67. Weak Mutation 294: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable result -> list
   * Goal 68. Weak Mutation 295: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> limit
   * Goal 69. Weak Mutation 296: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> newSize
   * Goal 70. Weak Mutation 297: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp Negation of i
   * Goal 71. Weak Mutation 298: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC 1 i
   * Goal 72. Weak Mutation 299: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC -1 i
   * Goal 73. Weak Mutation 300: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable list -> result
   * Goal 74. Weak Mutation 301: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> limit
   * Goal 75. Weak Mutation 302: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> newSize
   * Goal 76. Weak Mutation 303: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp Negation of i
   * Goal 77. Weak Mutation 304: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC 1 i
   * Goal 78. Weak Mutation 305: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC -1 i
   * Goal 79. Weak Mutation 308: edu.osu.cs362.arrayManip.goodResize([II)[I:86 - ReplaceVariable result -> list
   * Goal 80. Weak Mutation 309: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - InsertUnaryOp Negation
   * Goal 81. Weak Mutation 310: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != -> ==
   * Goal 82. Weak Mutation 311: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != null -> = null
   * Goal 83. Weak Mutation 313: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 0
   * Goal 84. Weak Mutation 314: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 1
   * Goal 85. Weak Mutation 315: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> -1
   * Goal 86. Weak Mutation 316: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 3
   * Goal 87. Weak Mutation 317: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceVariable i -> target
   * Goal 88. Weak Mutation 318: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp Negation of i
   * Goal 89. Weak Mutation 319: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC 1 i
   * Goal 90. Weak Mutation 320: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC -1 i
   * Goal 91. Weak Mutation 321: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceComparisonOperator >= -> -1
   * Goal 92. Weak Mutation 395: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceVariable i -> target
   * Goal 93. Weak Mutation 324: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable i -> target
   * Goal 94. Weak Mutation 325: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp Negation of i
   * Goal 95. Weak Mutation 326: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC 1 i
   * Goal 96. Weak Mutation 327: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC -1 i
   * Goal 97. Weak Mutation 328: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceConstant - 1 -> 0
   * Goal 98. Weak Mutation 329: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> %
   * Goal 99. Weak Mutation 330: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> -
   * Goal 100. Weak Mutation 331: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> *
   * Goal 101. Weak Mutation 332: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> /
   * Goal 102. Weak Mutation 333: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> i
   * Goal 103. Weak Mutation 334: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> target
   * Goal 104. Weak Mutation 335: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp Negation of j
   * Goal 105. Weak Mutation 336: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC 1 j
   * Goal 106. Weak Mutation 337: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC -1 j
   * Goal 107. Weak Mutation 338: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceComparisonOperator >= -> -1
   * Goal 108. Weak Mutation 339: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceComparisonOperator >= -> >
   * Goal 109. Weak Mutation 393: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> i
   * Goal 110. Weak Mutation 394: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> target
   * Goal 111. Weak Mutation 341: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable i -> j
   * Goal 112. Weak Mutation 342: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable i -> target
   * Goal 113. Weak Mutation 343: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of i
   * Goal 114. Weak Mutation 344: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 i
   * Goal 115. Weak Mutation 345: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 i
   * Goal 116. Weak Mutation 346: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable j -> i
   * Goal 117. Weak Mutation 347: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable j -> target
   * Goal 118. Weak Mutation 348: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of j
   * Goal 119. Weak Mutation 349: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 j
   * Goal 120. Weak Mutation 350: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 j
   * Goal 121. Weak Mutation 351: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> %
   * Goal 122. Weak Mutation 354: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> /
   * Goal 123. Weak Mutation 355: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable target -> i
   * Goal 124. Weak Mutation 356: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable target -> j
   * Goal 125. Weak Mutation 357: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of target
   * Goal 126. Weak Mutation 358: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 target
   * Goal 127. Weak Mutation 359: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 target
   * Goal 128. Weak Mutation 362: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceComparisonOperator != -> >
   */

  /*@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = arrayManip.goodResize(intArray0, 1815);
      // Undeclared exception!
      try { 
        arrayManip.findAndPrintPairs(intArray1, 36);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         //assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }*/

  //Test case number: 6
  /*
   * 61 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false
   * Goal 2. edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - true
   * Goal 3. edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - false
   * Goal 4. edu.osu.cs362.arrayManip.isAscending([I)Z: I19 Branch 33 IFNE L150 - false
   * Goal 5. edu.osu.cs362.arrayManip.isAscending([I)Z: I21 Branch 34 IFLT L150 - false
   * Goal 6. edu.osu.cs362.arrayManip.isAscending([I)Z: I25 Branch 35 IF_ICMPLT L150 - true
   * Goal 7. edu.osu.cs362.arrayManip.isAscending([I)Z: I41 Branch 36 IF_ICMPGT L152 - false
   * Goal 8. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 9. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 10. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - true in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 11. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I21 Branch 34 IFLT L150 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 12. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I19 Branch 33 IFNE L150 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 13. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I25 Branch 35 IF_ICMPLT L150 - true in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 14. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I41 Branch 36 IF_ICMPGT L152 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 15. [Output]: edu.osu.cs362.arrayManip.isAscending([I)Z:True
   * Goal 16. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 147
   * Goal 17. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 148
   * Goal 18. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 149
   * Goal 19. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 150
   * Goal 20. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 152
   * Goal 21. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 153
   * Goal 22. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 156
   * Goal 23. [METHOD] edu.osu.cs362.arrayManip.isAscending([I)Z
   * Goal 24. [METHODNOEX] edu.osu.cs362.arrayManip.isAscending([I)Z
   * Goal 25. Weak Mutation 524: edu.osu.cs362.arrayManip.isAscending([I)Z:147 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 525: edu.osu.cs362.arrayManip.isAscending([I)Z:148 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 526: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of ascending
   * Goal 28. Weak Mutation 527: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 ascending
   * Goal 29. Weak Mutation 528: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 ascending
   * Goal 30. Weak Mutation 529: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator == -> !=
   * Goal 31. Weak Mutation 530: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of index
   * Goal 32. Weak Mutation 531: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 index
   * Goal 33. Weak Mutation 532: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 index
   * Goal 34. Weak Mutation 533: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator >= -> -1
   * Goal 35. Weak Mutation 534: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator >= -> >
   * Goal 36. Weak Mutation 536: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 537: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - ReplaceComparisonOperator != -> ==
   * Goal 38. Weak Mutation 538: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp Negation of index
   * Goal 39. Weak Mutation 539: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC 1 index
   * Goal 40. Weak Mutation 540: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC -1 index
   * Goal 41. Weak Mutation 542: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - ReplaceComparisonOperator < -> !=
   * Goal 42. Weak Mutation 544: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp Negation of index
   * Goal 43. Weak Mutation 545: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC 1 index
   * Goal 44. Weak Mutation 546: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC -1 index
   * Goal 45. Weak Mutation 548: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - ReplaceComparisonOperator < -> -2
   * Goal 46. Weak Mutation 550: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp Negation of index
   * Goal 47. Weak Mutation 551: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC 1 index
   * Goal 48. Weak Mutation 552: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC -1 index
   * Goal 49. Weak Mutation 553: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceConstant - 1 -> 0
   * Goal 50. Weak Mutation 554: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> +
   * Goal 51. Weak Mutation 555: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> %
   * Goal 52. Weak Mutation 556: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> *
   * Goal 53. Weak Mutation 557: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> /
   * Goal 54. Weak Mutation 558: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp Negation of index
   * Goal 55. Weak Mutation 559: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC 1 index
   * Goal 56. Weak Mutation 560: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC -1 index
   * Goal 57. Weak Mutation 563: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceComparisonOperator > -> >=
   * Goal 58. Weak Mutation 564: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceConstant - 1 -> 0
   * Goal 59. Weak Mutation 566: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp Negation of ascending
   * Goal 60. Weak Mutation 567: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC 1 ascending
   * Goal 61. Weak Mutation 568: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = arrayManip.isAscending(intArray0);
      assertTrue(boolean0);
  }

  //Test case number: 7
  /*
   * 105 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false
   * Goal 2. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - true
   * Goal 3. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - true
   * Goal 4. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - false
   * Goal 5. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - true
   * Goal 6. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - false
   * Goal 7. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - true
   * Goal 8. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - false
   * Goal 9. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 10. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 11. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 12. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 13. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 14. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 15. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - true in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 16. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 17. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 96
   * Goal 18. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 98
   * Goal 19. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 99
   * Goal 20. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 100
   * Goal 21. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 101
   * Goal 22. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 106
   * Goal 23. [METHOD] edu.osu.cs362.arrayManip.findAndPrintPairs([II)V
   * Goal 24. [METHODNOEX] edu.osu.cs362.arrayManip.findAndPrintPairs([II)V
   * Goal 25. Weak Mutation 309: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 310: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != -> ==
   * Goal 27. Weak Mutation 311: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != null -> = null
   * Goal 28. Weak Mutation 313: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 0
   * Goal 29. Weak Mutation 314: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 1
   * Goal 30. Weak Mutation 315: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> -1
   * Goal 31. Weak Mutation 316: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 3
   * Goal 32. Weak Mutation 317: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceVariable i -> target
   * Goal 33. Weak Mutation 318: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp Negation of i
   * Goal 34. Weak Mutation 319: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC 1 i
   * Goal 35. Weak Mutation 320: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC -1 i
   * Goal 36. Weak Mutation 321: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceComparisonOperator >= -> -1
   * Goal 37. Weak Mutation 322: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceComparisonOperator >= -> >
   * Goal 38. Weak Mutation 395: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceVariable i -> target
   * Goal 39. Weak Mutation 324: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable i -> target
   * Goal 40. Weak Mutation 325: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp Negation of i
   * Goal 41. Weak Mutation 326: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC 1 i
   * Goal 42. Weak Mutation 327: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC -1 i
   * Goal 43. Weak Mutation 328: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceConstant - 1 -> 0
   * Goal 44. Weak Mutation 329: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> %
   * Goal 45. Weak Mutation 330: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> -
   * Goal 46. Weak Mutation 331: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> *
   * Goal 47. Weak Mutation 332: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> /
   * Goal 48. Weak Mutation 333: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> i
   * Goal 49. Weak Mutation 334: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> target
   * Goal 50. Weak Mutation 335: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp Negation of j
   * Goal 51. Weak Mutation 336: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC 1 j
   * Goal 52. Weak Mutation 337: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC -1 j
   * Goal 53. Weak Mutation 338: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceComparisonOperator >= -> -1
   * Goal 54. Weak Mutation 339: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceComparisonOperator >= -> >
   * Goal 55. Weak Mutation 393: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> i
   * Goal 56. Weak Mutation 394: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> target
   * Goal 57. Weak Mutation 341: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable i -> j
   * Goal 58. Weak Mutation 342: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable i -> target
   * Goal 59. Weak Mutation 343: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of i
   * Goal 60. Weak Mutation 344: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 i
   * Goal 61. Weak Mutation 345: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 i
   * Goal 62. Weak Mutation 346: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable j -> i
   * Goal 63. Weak Mutation 347: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable j -> target
   * Goal 64. Weak Mutation 348: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of j
   * Goal 65. Weak Mutation 349: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 j
   * Goal 66. Weak Mutation 350: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 j
   * Goal 67. Weak Mutation 351: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> %
   * Goal 68. Weak Mutation 354: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> /
   * Goal 69. Weak Mutation 355: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable target -> i
   * Goal 70. Weak Mutation 356: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable target -> j
   * Goal 71. Weak Mutation 357: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of target
   * Goal 72. Weak Mutation 358: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 target
   * Goal 73. Weak Mutation 359: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 target
   * Goal 74. Weak Mutation 360: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceComparisonOperator != -> -1
   * Goal 75. Weak Mutation 361: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceComparisonOperator != -> <
   * Goal 76. Weak Mutation 363: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant - The two elements at indices  -> 
   * Goal 77. Weak Mutation 364: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> j
   * Goal 78. Weak Mutation 365: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> target
   * Goal 79. Weak Mutation 366: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of i
   * Goal 80. Weak Mutation 367: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 i
   * Goal 81. Weak Mutation 368: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 i
   * Goal 82. Weak Mutation 369: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  and  -> 
   * Goal 83. Weak Mutation 370: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> i
   * Goal 84. Weak Mutation 371: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> target
   * Goal 85. Weak Mutation 372: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of j
   * Goal 86. Weak Mutation 373: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 j
   * Goal 87. Weak Mutation 374: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 j
   * Goal 88. Weak Mutation 375: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  are  -> 
   * Goal 89. Weak Mutation 376: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> j
   * Goal 90. Weak Mutation 377: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> target
   * Goal 91. Weak Mutation 378: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of i
   * Goal 92. Weak Mutation 379: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 i
   * Goal 93. Weak Mutation 380: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 i
   * Goal 94. Weak Mutation 381: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  and  -> 
   * Goal 95. Weak Mutation 382: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> i
   * Goal 96. Weak Mutation 383: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> target
   * Goal 97. Weak Mutation 384: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of j
   * Goal 98. Weak Mutation 385: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 j
   * Goal 99. Weak Mutation 386: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 j
   * Goal 100. Weak Mutation 387: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  add up to  -> 
   * Goal 101. Weak Mutation 388: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable target -> i
   * Goal 102. Weak Mutation 389: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable target -> j
   * Goal 103. Weak Mutation 390: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of target
   * Goal 104. Weak Mutation 391: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 target
   * Goal 105. Weak Mutation 392: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 target
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = 990;
      arrayManip.findAndPrintPairs(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 990, 0, 0}, intArray0);
  }

  //Test case number: 8
  /*
   * 65 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - true
   * Goal 2. edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false
   * Goal 3. edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - false
   * Goal 4. edu.osu.cs362.arrayManip.isAscending([I)Z: I19 Branch 33 IFNE L150 - false
   * Goal 5. edu.osu.cs362.arrayManip.isAscending([I)Z: I21 Branch 34 IFLT L150 - false
   * Goal 6. edu.osu.cs362.arrayManip.isAscending([I)Z: I25 Branch 35 IF_ICMPLT L150 - true
   * Goal 7. edu.osu.cs362.arrayManip.isAscending([I)Z: I41 Branch 36 IF_ICMPGT L152 - true
   * Goal 8. edu.osu.cs362.arrayManip.isAscending([I)Z: I41 Branch 36 IF_ICMPGT L152 - false
   * Goal 9. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 10. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 11. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - true in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 12. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I21 Branch 34 IFLT L150 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 13. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I19 Branch 33 IFNE L150 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 14. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I25 Branch 35 IF_ICMPLT L150 - true in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 15. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I41 Branch 36 IF_ICMPGT L152 - true in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 16. Branch edu.osu.cs362.arrayManip.isAscending([I)Z: I41 Branch 36 IF_ICMPGT L152 - false in context: edu.osu.cs362.arrayManip:isAscending([I)Z
   * Goal 17. [Output]: edu.osu.cs362.arrayManip.isAscending([I)Z:False
   * Goal 18. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 147
   * Goal 19. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 148
   * Goal 20. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 149
   * Goal 21. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 150
   * Goal 22. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 152
   * Goal 23. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 153
   * Goal 24. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 156
   * Goal 25. [METHOD] edu.osu.cs362.arrayManip.isAscending([I)Z
   * Goal 26. [METHODNOEX] edu.osu.cs362.arrayManip.isAscending([I)Z
   * Goal 27. Weak Mutation 524: edu.osu.cs362.arrayManip.isAscending([I)Z:147 - ReplaceConstant - 1 -> 0
   * Goal 28. Weak Mutation 525: edu.osu.cs362.arrayManip.isAscending([I)Z:148 - ReplaceConstant - 1 -> 0
   * Goal 29. Weak Mutation 526: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of ascending
   * Goal 30. Weak Mutation 527: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 ascending
   * Goal 31. Weak Mutation 528: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 ascending
   * Goal 32. Weak Mutation 529: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator == -> !=
   * Goal 33. Weak Mutation 530: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of index
   * Goal 34. Weak Mutation 531: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 index
   * Goal 35. Weak Mutation 532: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 index
   * Goal 36. Weak Mutation 533: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator >= -> -1
   * Goal 37. Weak Mutation 536: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 537: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - ReplaceComparisonOperator != -> ==
   * Goal 39. Weak Mutation 538: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp Negation of index
   * Goal 40. Weak Mutation 539: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC 1 index
   * Goal 41. Weak Mutation 540: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC -1 index
   * Goal 42. Weak Mutation 542: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - ReplaceComparisonOperator < -> !=
   * Goal 43. Weak Mutation 544: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp Negation of index
   * Goal 44. Weak Mutation 545: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC 1 index
   * Goal 45. Weak Mutation 546: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - InsertUnaryOp IINC -1 index
   * Goal 46. Weak Mutation 548: edu.osu.cs362.arrayManip.isAscending([I)Z:150 - ReplaceComparisonOperator < -> -2
   * Goal 47. Weak Mutation 550: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp Negation of index
   * Goal 48. Weak Mutation 551: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC 1 index
   * Goal 49. Weak Mutation 552: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC -1 index
   * Goal 50. Weak Mutation 553: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 554: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> +
   * Goal 52. Weak Mutation 555: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> %
   * Goal 53. Weak Mutation 556: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> *
   * Goal 54. Weak Mutation 557: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceArithmeticOperator - -> /
   * Goal 55. Weak Mutation 558: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp Negation of index
   * Goal 56. Weak Mutation 559: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC 1 index
   * Goal 57. Weak Mutation 560: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - InsertUnaryOp IINC -1 index
   * Goal 58. Weak Mutation 561: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceComparisonOperator > -> !=
   * Goal 59. Weak Mutation 562: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceComparisonOperator > -> -2
   * Goal 60. Weak Mutation 563: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceComparisonOperator > -> >=
   * Goal 61. Weak Mutation 564: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceConstant - 1 -> 0
   * Goal 62. Weak Mutation 565: edu.osu.cs362.arrayManip.isAscending([I)Z:152 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 566: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp Negation of ascending
   * Goal 64. Weak Mutation 567: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC 1 ascending
   * Goal 65. Weak Mutation 568: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = 687;
      boolean boolean0 = arrayManip.isAscending(intArray0);
      assertFalse(boolean0);
  }

  //Test case number: 9
  /*
   * 20 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.showList([I)V: I8 Branch 30 IF_ICMPGE L138 - true
   * Goal 2. edu.osu.cs362.arrayManip.showList([I)V: I8 Branch 30 IF_ICMPGE L138 - false
   * Goal 3. Branch edu.osu.cs362.arrayManip.showList([I)V: I8 Branch 30 IF_ICMPGE L138 - false in context: edu.osu.cs362.arrayManip:showList([I)V
   * Goal 4. Branch edu.osu.cs362.arrayManip.showList([I)V: I8 Branch 30 IF_ICMPGE L138 - true in context: edu.osu.cs362.arrayManip:showList([I)V
   * Goal 5. edu.osu.cs362.arrayManip.showList([I)V: Line 138
   * Goal 6. edu.osu.cs362.arrayManip.showList([I)V: Line 139
   * Goal 7. edu.osu.cs362.arrayManip.showList([I)V: Line 140
   * Goal 8. edu.osu.cs362.arrayManip.showList([I)V: Line 141
   * Goal 9. [METHOD] edu.osu.cs362.arrayManip.showList([I)V
   * Goal 10. [METHODNOEX] edu.osu.cs362.arrayManip.showList([I)V
   * Goal 11. Weak Mutation 513: edu.osu.cs362.arrayManip.showList([I)V:138 - ReplaceConstant - 0 -> 1
   * Goal 12. Weak Mutation 514: edu.osu.cs362.arrayManip.showList([I)V:138 - InsertUnaryOp Negation of i
   * Goal 13. Weak Mutation 515: edu.osu.cs362.arrayManip.showList([I)V:138 - InsertUnaryOp IINC 1 i
   * Goal 14. Weak Mutation 516: edu.osu.cs362.arrayManip.showList([I)V:138 - InsertUnaryOp IINC -1 i
   * Goal 15. Weak Mutation 517: edu.osu.cs362.arrayManip.showList([I)V:138 - ReplaceComparisonOperator >= -> -1
   * Goal 16. Weak Mutation 518: edu.osu.cs362.arrayManip.showList([I)V:138 - ReplaceComparisonOperator >= -> >
   * Goal 17. Weak Mutation 520: edu.osu.cs362.arrayManip.showList([I)V:139 - InsertUnaryOp Negation of i
   * Goal 18. Weak Mutation 521: edu.osu.cs362.arrayManip.showList([I)V:139 - InsertUnaryOp IINC 1 i
   * Goal 19. Weak Mutation 522: edu.osu.cs362.arrayManip.showList([I)V:139 - InsertUnaryOp IINC -1 i
   * Goal 20. Weak Mutation 523: edu.osu.cs362.arrayManip.showList([I)V:139 - ReplaceConstant -   -> 
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      arrayManip.showList(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  //Test case number: 10
  /*
   * 73 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false
   * Goal 2. edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - true
   * Goal 3. edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - true
   * Goal 4. edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - false
   * Goal 5. edu.osu.cs362.arrayManip.bubblesort([I)V: I25 Branch 22 IFEQ L119 - false
   * Goal 6. edu.osu.cs362.arrayManip.bubblesort([I)V: I42 Branch 23 IF_ICMPGE L121 - true
   * Goal 7. edu.osu.cs362.arrayManip.bubblesort([I)V: I120 Branch 28 IFNE L133 - false
   * Goal 8. edu.osu.cs362.arrayManip.bubblesort([I)V: I123 Branch 29 IFNE L133 - true
   * Goal 9. edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false
   * Goal 10. edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - true
   * Goal 11. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 12. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 13. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 14. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 15. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I25 Branch 22 IFEQ L119 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 16. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I42 Branch 23 IF_ICMPGE L121 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 17. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I123 Branch 29 IFNE L133 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 18. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I120 Branch 28 IFNE L133 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 19. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 115
   * Goal 20. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 118
   * Goal 21. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 119
   * Goal 22. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 120
   * Goal 23. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 121
   * Goal 24. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 133
   * Goal 25. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 134
   * Goal 26. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 147
   * Goal 27. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 148
   * Goal 28. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 149
   * Goal 29. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 156
   * Goal 30. [METHOD] edu.osu.cs362.arrayManip.bubblesort([I)V
   * Goal 31. [METHODNOEX] edu.osu.cs362.arrayManip.bubblesort([I)V
   * Goal 32. Weak Mutation 396: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 397: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != -> ==
   * Goal 34. Weak Mutation 398: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != null -> = null
   * Goal 35. Weak Mutation 400: edu.osu.cs362.arrayManip.bubblesort([I)V:118 - ReplaceConstant - 1 -> 0
   * Goal 36. Weak Mutation 401: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 402: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp Negation of i
   * Goal 38. Weak Mutation 403: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC 1 i
   * Goal 39. Weak Mutation 404: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC -1 i
   * Goal 40. Weak Mutation 405: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator >= -> -1
   * Goal 41. Weak Mutation 406: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator >= -> >
   * Goal 42. Weak Mutation 408: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp Negation of changed
   * Goal 43. Weak Mutation 409: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC 1 changed
   * Goal 44. Weak Mutation 410: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC -1 changed
   * Goal 45. Weak Mutation 411: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator == -> !=
   * Goal 46. Weak Mutation 412: edu.osu.cs362.arrayManip.bubblesort([I)V:120 - ReplaceConstant - 0 -> 1
   * Goal 47. Weak Mutation 413: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 415: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp Negation of j
   * Goal 49. Weak Mutation 416: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC 1 j
   * Goal 50. Weak Mutation 417: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC -1 j
   * Goal 51. Weak Mutation 419: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp Negation of i
   * Goal 52. Weak Mutation 420: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC 1 i
   * Goal 53. Weak Mutation 421: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC -1 i
   * Goal 54. Weak Mutation 423: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> %
   * Goal 55. Weak Mutation 425: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> /
   * Goal 56. Weak Mutation 426: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceConstant - 1 -> 0
   * Goal 57. Weak Mutation 427: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> +
   * Goal 58. Weak Mutation 429: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> *
   * Goal 59. Weak Mutation 430: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> /
   * Goal 60. Weak Mutation 432: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceComparisonOperator >= -> >
   * Goal 61. Weak Mutation 524: edu.osu.cs362.arrayManip.isAscending([I)Z:147 - ReplaceConstant - 1 -> 0
   * Goal 62. Weak Mutation 525: edu.osu.cs362.arrayManip.isAscending([I)Z:148 - ReplaceConstant - 1 -> 0
   * Goal 63. Weak Mutation 526: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of ascending
   * Goal 64. Weak Mutation 527: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 ascending
   * Goal 65. Weak Mutation 528: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 ascending
   * Goal 66. Weak Mutation 529: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator == -> !=
   * Goal 67. Weak Mutation 530: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of index
   * Goal 68. Weak Mutation 531: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 index
   * Goal 69. Weak Mutation 532: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 index
   * Goal 70. Weak Mutation 534: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator >= -> >
   * Goal 71. Weak Mutation 566: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp Negation of ascending
   * Goal 72. Weak Mutation 567: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC 1 ascending
   * Goal 73. Weak Mutation 568: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      arrayManip.bubblesort(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  //Test case number: 11
  /*
   * 11 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false
   * Goal 2. edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - false
   * Goal 3. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 4. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 5. bubblesort([I)V_java.lang.AssertionError_EXPLICIT
   * Goal 6. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 115
   * Goal 7. [METHOD] edu.osu.cs362.arrayManip.bubblesort([I)V
   * Goal 8. Weak Mutation 396: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 397: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 398: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != null -> = null
   * Goal 11. Weak Mutation 399: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.bubblesort((int[]) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 12
  /*
   * 11 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false
   * Goal 2. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - false
   * Goal 3. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 4. Branch edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false in context: edu.osu.cs362.arrayManip:findAndPrintPairs([II)V
   * Goal 5. findAndPrintPairs([II)V_java.lang.AssertionError_EXPLICIT
   * Goal 6. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 96
   * Goal 7. [METHOD] edu.osu.cs362.arrayManip.findAndPrintPairs([II)V
   * Goal 8. Weak Mutation 309: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 310: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 311: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != null -> = null
   * Goal 11. Weak Mutation 312: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.findAndPrintPairs((int[]) null, 11);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 13
  /*
   * 123 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false
   * Goal 2. edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false
   * Goal 3. edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - true
   * Goal 4. edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - true
   * Goal 5. edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - false
   * Goal 6. edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false
   * Goal 7. edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - true
   * Goal 8. edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - false
   * Goal 9. edu.osu.cs362.arrayManip.bubblesort([I)V: I25 Branch 22 IFEQ L119 - false
   * Goal 10. edu.osu.cs362.arrayManip.bubblesort([I)V: I42 Branch 23 IF_ICMPGE L121 - false
   * Goal 11. edu.osu.cs362.arrayManip.bubblesort([I)V: I46 Branch 24 IFNE L122 - false
   * Goal 12. edu.osu.cs362.arrayManip.bubblesort([I)V: I48 Branch 25 IFLE L122 - true
   * Goal 13. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 14. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 15. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - true in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 16. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - true in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 17. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 18. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 19. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 20. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 21. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I25 Branch 22 IFEQ L119 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 22. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I42 Branch 23 IF_ICMPGE L121 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 23. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I46 Branch 24 IFNE L122 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 24. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I48 Branch 25 IFLE L122 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 25. bubblesort([I)V_java.lang.AssertionError_EXPLICIT
   * Goal 26. [Output]: edu.osu.cs362.arrayManip.goodResize([II)[I:NonEmptyArray
   * Goal 27. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 115
   * Goal 28. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 118
   * Goal 29. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 119
   * Goal 30. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 120
   * Goal 31. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 121
   * Goal 32. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 122
   * Goal 33. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 77
   * Goal 34. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 79
   * Goal 35. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 80
   * Goal 36. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 82
   * Goal 37. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 83
   * Goal 38. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 86
   * Goal 39. [METHOD] edu.osu.cs362.arrayManip.bubblesort([I)V
   * Goal 40. [METHOD] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 41. [METHODNOEX] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 42. Weak Mutation 263: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 264: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator != -> ==
   * Goal 44. Weak Mutation 265: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator = null -> != null
   * Goal 45. Weak Mutation 266: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation of newSize
   * Goal 46. Weak Mutation 267: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC 1 newSize
   * Goal 47. Weak Mutation 268: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC -1 newSize
   * Goal 48. Weak Mutation 270: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator >= -> ==
   * Goal 49. Weak Mutation 273: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp Negation of newSize
   * Goal 50. Weak Mutation 274: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp IINC 1 newSize
   * Goal 51. Weak Mutation 275: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp IINC -1 newSize
   * Goal 52. Weak Mutation 276: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - ReplaceVariable list -> result
   * Goal 53. Weak Mutation 277: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp Negation of newSize
   * Goal 54. Weak Mutation 278: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp IINC 1 newSize
   * Goal 55. Weak Mutation 279: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp IINC -1 newSize
   * Goal 56. Weak Mutation 280: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceConstant - 0 -> 1
   * Goal 57. Weak Mutation 281: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> limit
   * Goal 58. Weak Mutation 282: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> newSize
   * Goal 59. Weak Mutation 283: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp Negation of i
   * Goal 60. Weak Mutation 284: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC 1 i
   * Goal 61. Weak Mutation 285: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC -1 i
   * Goal 62. Weak Mutation 286: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable limit -> i
   * Goal 63. Weak Mutation 287: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable limit -> newSize
   * Goal 64. Weak Mutation 288: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp Negation of limit
   * Goal 65. Weak Mutation 289: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC 1 limit
   * Goal 66. Weak Mutation 290: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC -1 limit
   * Goal 67. Weak Mutation 291: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceComparisonOperator >= -> -1
   * Goal 68. Weak Mutation 292: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceComparisonOperator >= -> >
   * Goal 69. Weak Mutation 306: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> limit
   * Goal 70. Weak Mutation 307: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceVariable i -> newSize
   * Goal 71. Weak Mutation 294: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable result -> list
   * Goal 72. Weak Mutation 295: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> limit
   * Goal 73. Weak Mutation 296: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> newSize
   * Goal 74. Weak Mutation 297: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp Negation of i
   * Goal 75. Weak Mutation 298: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC 1 i
   * Goal 76. Weak Mutation 299: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC -1 i
   * Goal 77. Weak Mutation 300: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable list -> result
   * Goal 78. Weak Mutation 301: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> limit
   * Goal 79. Weak Mutation 302: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - ReplaceVariable i -> newSize
   * Goal 80. Weak Mutation 303: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp Negation of i
   * Goal 81. Weak Mutation 304: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC 1 i
   * Goal 82. Weak Mutation 305: edu.osu.cs362.arrayManip.goodResize([II)[I:83 - InsertUnaryOp IINC -1 i
   * Goal 83. Weak Mutation 308: edu.osu.cs362.arrayManip.goodResize([II)[I:86 - ReplaceVariable result -> list
   * Goal 84. Weak Mutation 396: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - InsertUnaryOp Negation
   * Goal 85. Weak Mutation 397: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != -> ==
   * Goal 86. Weak Mutation 398: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != null -> = null
   * Goal 87. Weak Mutation 400: edu.osu.cs362.arrayManip.bubblesort([I)V:118 - ReplaceConstant - 1 -> 0
   * Goal 88. Weak Mutation 401: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceConstant - 0 -> 1
   * Goal 89. Weak Mutation 402: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp Negation of i
   * Goal 90. Weak Mutation 403: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC 1 i
   * Goal 91. Weak Mutation 404: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC -1 i
   * Goal 92. Weak Mutation 405: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator >= -> -1
   * Goal 93. Weak Mutation 408: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp Negation of changed
   * Goal 94. Weak Mutation 409: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC 1 changed
   * Goal 95. Weak Mutation 410: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC -1 changed
   * Goal 96. Weak Mutation 411: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator == -> !=
   * Goal 97. Weak Mutation 412: edu.osu.cs362.arrayManip.bubblesort([I)V:120 - ReplaceConstant - 0 -> 1
   * Goal 98. Weak Mutation 413: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceConstant - 0 -> 1
   * Goal 99. Weak Mutation 415: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp Negation of j
   * Goal 100. Weak Mutation 416: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC 1 j
   * Goal 101. Weak Mutation 417: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC -1 j
   * Goal 102. Weak Mutation 419: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp Negation of i
   * Goal 103. Weak Mutation 420: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC 1 i
   * Goal 104. Weak Mutation 421: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC -1 i
   * Goal 105. Weak Mutation 423: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> %
   * Goal 106. Weak Mutation 425: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> /
   * Goal 107. Weak Mutation 426: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceConstant - 1 -> 0
   * Goal 108. Weak Mutation 427: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> +
   * Goal 109. Weak Mutation 428: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> %
   * Goal 110. Weak Mutation 429: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> *
   * Goal 111. Weak Mutation 430: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> /
   * Goal 112. Weak Mutation 431: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceComparisonOperator >= -> -1
   * Goal 113. Weak Mutation 434: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp Negation
   * Goal 114. Weak Mutation 435: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceComparisonOperator != -> ==
   * Goal 115. Weak Mutation 437: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp Negation of j
   * Goal 116. Weak Mutation 438: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC 1 j
   * Goal 117. Weak Mutation 439: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC -1 j
   * Goal 118. Weak Mutation 442: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceComparisonOperator <= -> <
   * Goal 119. Weak Mutation 455: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceConstant - loop counter j  -> 
   * Goal 120. Weak Mutation 457: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp Negation of j
   * Goal 121. Weak Mutation 458: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC 1 j
   * Goal 122. Weak Mutation 459: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC -1 j
   * Goal 123. Weak Mutation 460: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceConstant - is out of bounds. -> 
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = arrayManip.goodResize(intArray0, 3206);
      // Undeclared exception!
      try { 
        arrayManip.bubblesort(intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // loop counter j 0is out of bounds.
         //
      }
  }

  //Test case number: 14
  /*
   * 17 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false
   * Goal 2. edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false
   * Goal 3. edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - false
   * Goal 4. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 5. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 6. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 7. goodResize([II)[I_java.lang.AssertionError_EXPLICIT
   * Goal 8. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 77
   * Goal 9. [METHOD] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 10. Weak Mutation 263: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation
   * Goal 11. Weak Mutation 264: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator != -> ==
   * Goal 12. Weak Mutation 265: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator = null -> != null
   * Goal 13. Weak Mutation 266: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation of newSize
   * Goal 14. Weak Mutation 267: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC 1 newSize
   * Goal 15. Weak Mutation 268: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC -1 newSize
   * Goal 16. Weak Mutation 269: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator >= -> -1
   * Goal 17. Weak Mutation 272: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        arrayManip.goodResize(intArray0, (-3127));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 15
  /*
   * 11 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false
   * Goal 2. edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - true
   * Goal 3. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 4. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - true in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 5. goodResize([II)[I_java.lang.AssertionError_EXPLICIT
   * Goal 6. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 77
   * Goal 7. [METHOD] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 8. Weak Mutation 263: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 264: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 265: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator = null -> != null
   * Goal 11. Weak Mutation 272: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.goodResize((int[]) null, 408);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 16
  /*
   * 84 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false
   * Goal 2. edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false
   * Goal 3. edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - true
   * Goal 4. edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - true
   * Goal 5. edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false
   * Goal 6. edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - true
   * Goal 7. edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - true
   * Goal 8. edu.osu.cs362.arrayManip.bubblesort([I)V: I120 Branch 28 IFNE L133 - false
   * Goal 9. edu.osu.cs362.arrayManip.bubblesort([I)V: I123 Branch 29 IFNE L133 - true
   * Goal 10. edu.osu.cs362.arrayManip.isAscending([I)Z: I11 Branch 31 IFEQ L149 - false
   * Goal 11. edu.osu.cs362.arrayManip.isAscending([I)Z: I15 Branch 32 IF_ICMPGE L149 - true
   * Goal 12. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I3 Branch 10 IFNE L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 13. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I5 Branch 11 IFNULL L77 - false in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 14. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I7 Branch 12 IFGE L77 - true in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 15. Branch edu.osu.cs362.arrayManip.goodResize([II)[I: I33 Branch 13 IF_ICMPGE L82 - true in context: edu.osu.cs362.arrayManip:goodResize([II)[I
   * Goal 16. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 17. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 18. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 19. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I123 Branch 29 IFNE L133 - true in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 20. Branch edu.osu.cs362.arrayManip.bubblesort([I)V: I120 Branch 28 IFNE L133 - false in context: edu.osu.cs362.arrayManip:bubblesort([I)V
   * Goal 21. [Output]: edu.osu.cs362.arrayManip.goodResize([II)[I:EmptyArray
   * Goal 22. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 115
   * Goal 23. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 118
   * Goal 24. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 119
   * Goal 25. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 133
   * Goal 26. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 134
   * Goal 27. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 77
   * Goal 28. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 79
   * Goal 29. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 80
   * Goal 30. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 82
   * Goal 31. edu.osu.cs362.arrayManip.goodResize([II)[I: Line 86
   * Goal 32. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 147
   * Goal 33. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 148
   * Goal 34. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 149
   * Goal 35. edu.osu.cs362.arrayManip.isAscending([I)Z: Line 156
   * Goal 36. [METHOD] edu.osu.cs362.arrayManip.bubblesort([I)V
   * Goal 37. [METHOD] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 38. [METHODNOEX] edu.osu.cs362.arrayManip.bubblesort([I)V
   * Goal 39. [METHODNOEX] edu.osu.cs362.arrayManip.goodResize([II)[I
   * Goal 40. Weak Mutation 263: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 264: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator != -> ==
   * Goal 42. Weak Mutation 265: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator = null -> != null
   * Goal 43. Weak Mutation 266: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp Negation of newSize
   * Goal 44. Weak Mutation 267: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC 1 newSize
   * Goal 45. Weak Mutation 268: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - InsertUnaryOp IINC -1 newSize
   * Goal 46. Weak Mutation 271: edu.osu.cs362.arrayManip.goodResize([II)[I:77 - ReplaceComparisonOperator >= -> >
   * Goal 47. Weak Mutation 273: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp Negation of newSize
   * Goal 48. Weak Mutation 274: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp IINC 1 newSize
   * Goal 49. Weak Mutation 275: edu.osu.cs362.arrayManip.goodResize([II)[I:79 - InsertUnaryOp IINC -1 newSize
   * Goal 50. Weak Mutation 276: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - ReplaceVariable list -> result
   * Goal 51. Weak Mutation 277: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp Negation of newSize
   * Goal 52. Weak Mutation 278: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp IINC 1 newSize
   * Goal 53. Weak Mutation 279: edu.osu.cs362.arrayManip.goodResize([II)[I:80 - InsertUnaryOp IINC -1 newSize
   * Goal 54. Weak Mutation 280: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceConstant - 0 -> 1
   * Goal 55. Weak Mutation 283: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp Negation of i
   * Goal 56. Weak Mutation 284: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC 1 i
   * Goal 57. Weak Mutation 285: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC -1 i
   * Goal 58. Weak Mutation 288: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp Negation of limit
   * Goal 59. Weak Mutation 289: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC 1 limit
   * Goal 60. Weak Mutation 290: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - InsertUnaryOp IINC -1 limit
   * Goal 61. Weak Mutation 292: edu.osu.cs362.arrayManip.goodResize([II)[I:82 - ReplaceComparisonOperator >= -> >
   * Goal 62. Weak Mutation 308: edu.osu.cs362.arrayManip.goodResize([II)[I:86 - ReplaceVariable result -> list
   * Goal 63. Weak Mutation 396: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - InsertUnaryOp Negation
   * Goal 64. Weak Mutation 397: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != -> ==
   * Goal 65. Weak Mutation 398: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != null -> = null
   * Goal 66. Weak Mutation 400: edu.osu.cs362.arrayManip.bubblesort([I)V:118 - ReplaceConstant - 1 -> 0
   * Goal 67. Weak Mutation 401: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 402: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp Negation of i
   * Goal 69. Weak Mutation 403: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC 1 i
   * Goal 70. Weak Mutation 404: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC -1 i
   * Goal 71. Weak Mutation 406: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator >= -> >
   * Goal 72. Weak Mutation 524: edu.osu.cs362.arrayManip.isAscending([I)Z:147 - ReplaceConstant - 1 -> 0
   * Goal 73. Weak Mutation 525: edu.osu.cs362.arrayManip.isAscending([I)Z:148 - ReplaceConstant - 1 -> 0
   * Goal 74. Weak Mutation 526: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of ascending
   * Goal 75. Weak Mutation 527: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 ascending
   * Goal 76. Weak Mutation 528: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 ascending
   * Goal 77. Weak Mutation 529: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator == -> !=
   * Goal 78. Weak Mutation 530: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp Negation of index
   * Goal 79. Weak Mutation 531: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC 1 index
   * Goal 80. Weak Mutation 532: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - InsertUnaryOp IINC -1 index
   * Goal 81. Weak Mutation 535: edu.osu.cs362.arrayManip.isAscending([I)Z:149 - ReplaceComparisonOperator >= -> ==
   * Goal 82. Weak Mutation 566: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp Negation of ascending
   * Goal 83. Weak Mutation 567: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC 1 ascending
   * Goal 84. Weak Mutation 568: edu.osu.cs362.arrayManip.isAscending([I)Z:156 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = arrayManip.goodResize(intArray0, 0);
      arrayManip.bubblesort(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  //Test case number: 17
  /*
   * 53 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false
   * Goal 2. edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - true
   * Goal 3. edu.osu.cs362.arrayManip.badResize([II)V: I32 Branch 9 IF_ICMPGE L59 - true
   * Goal 4. edu.osu.cs362.arrayManip.badResize([II)V: I32 Branch 9 IF_ICMPGE L59 - false
   * Goal 5. Branch edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - true in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 6. Branch edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 7. Branch edu.osu.cs362.arrayManip.badResize([II)V: I32 Branch 9 IF_ICMPGE L59 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 8. Branch edu.osu.cs362.arrayManip.badResize([II)V: I32 Branch 9 IF_ICMPGE L59 - true in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 9. edu.osu.cs362.arrayManip.badResize([II)V: Line 54
   * Goal 10. edu.osu.cs362.arrayManip.badResize([II)V: Line 56
   * Goal 11. edu.osu.cs362.arrayManip.badResize([II)V: Line 57
   * Goal 12. edu.osu.cs362.arrayManip.badResize([II)V: Line 59
   * Goal 13. edu.osu.cs362.arrayManip.badResize([II)V: Line 60
   * Goal 14. edu.osu.cs362.arrayManip.badResize([II)V: Line 68
   * Goal 15. [METHOD] edu.osu.cs362.arrayManip.badResize([II)V
   * Goal 16. [METHODNOEX] edu.osu.cs362.arrayManip.badResize([II)V
   * Goal 17. Weak Mutation 218: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 219: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != -> ==
   * Goal 19. Weak Mutation 220: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 228: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp Negation of newSize
   * Goal 21. Weak Mutation 229: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC 1 newSize
   * Goal 22. Weak Mutation 230: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC -1 newSize
   * Goal 23. Weak Mutation 231: edu.osu.cs362.arrayManip.badResize([II)V:57 - ReplaceVariable list -> temp
   * Goal 24. Weak Mutation 232: edu.osu.cs362.arrayManip.badResize([II)V:57 - InsertUnaryOp Negation of newSize
   * Goal 25. Weak Mutation 233: edu.osu.cs362.arrayManip.badResize([II)V:57 - InsertUnaryOp IINC 1 newSize
   * Goal 26. Weak Mutation 234: edu.osu.cs362.arrayManip.badResize([II)V:57 - InsertUnaryOp IINC -1 newSize
   * Goal 27. Weak Mutation 235: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 236: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceVariable i -> limit
   * Goal 29. Weak Mutation 237: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceVariable i -> newSize
   * Goal 30. Weak Mutation 238: edu.osu.cs362.arrayManip.badResize([II)V:59 - InsertUnaryOp Negation of i
   * Goal 31. Weak Mutation 239: edu.osu.cs362.arrayManip.badResize([II)V:59 - InsertUnaryOp IINC 1 i
   * Goal 32. Weak Mutation 240: edu.osu.cs362.arrayManip.badResize([II)V:59 - InsertUnaryOp IINC -1 i
   * Goal 33. Weak Mutation 241: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceVariable limit -> i
   * Goal 34. Weak Mutation 242: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceVariable limit -> newSize
   * Goal 35. Weak Mutation 243: edu.osu.cs362.arrayManip.badResize([II)V:59 - InsertUnaryOp Negation of limit
   * Goal 36. Weak Mutation 244: edu.osu.cs362.arrayManip.badResize([II)V:59 - InsertUnaryOp IINC 1 limit
   * Goal 37. Weak Mutation 245: edu.osu.cs362.arrayManip.badResize([II)V:59 - InsertUnaryOp IINC -1 limit
   * Goal 38. Weak Mutation 246: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceComparisonOperator >= -> -1
   * Goal 39. Weak Mutation 247: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceComparisonOperator >= -> >
   * Goal 40. Weak Mutation 261: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceVariable i -> limit
   * Goal 41. Weak Mutation 262: edu.osu.cs362.arrayManip.badResize([II)V:59 - ReplaceVariable i -> newSize
   * Goal 42. Weak Mutation 249: edu.osu.cs362.arrayManip.badResize([II)V:60 - ReplaceVariable temp -> list
   * Goal 43. Weak Mutation 250: edu.osu.cs362.arrayManip.badResize([II)V:60 - ReplaceVariable i -> limit
   * Goal 44. Weak Mutation 251: edu.osu.cs362.arrayManip.badResize([II)V:60 - ReplaceVariable i -> newSize
   * Goal 45. Weak Mutation 252: edu.osu.cs362.arrayManip.badResize([II)V:60 - InsertUnaryOp Negation of i
   * Goal 46. Weak Mutation 253: edu.osu.cs362.arrayManip.badResize([II)V:60 - InsertUnaryOp IINC 1 i
   * Goal 47. Weak Mutation 254: edu.osu.cs362.arrayManip.badResize([II)V:60 - InsertUnaryOp IINC -1 i
   * Goal 48. Weak Mutation 255: edu.osu.cs362.arrayManip.badResize([II)V:60 - ReplaceVariable list -> temp
   * Goal 49. Weak Mutation 256: edu.osu.cs362.arrayManip.badResize([II)V:60 - ReplaceVariable i -> limit
   * Goal 50. Weak Mutation 257: edu.osu.cs362.arrayManip.badResize([II)V:60 - ReplaceVariable i -> newSize
   * Goal 51. Weak Mutation 258: edu.osu.cs362.arrayManip.badResize([II)V:60 - InsertUnaryOp Negation of i
   * Goal 52. Weak Mutation 259: edu.osu.cs362.arrayManip.badResize([II)V:60 - InsertUnaryOp IINC 1 i
   * Goal 53. Weak Mutation 260: edu.osu.cs362.arrayManip.badResize([II)V:60 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      arrayManip.badResize(intArray0, 259);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  //Test case number: 18
  /*
   * 17 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false
   * Goal 2. edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - false
   * Goal 3. edu.osu.cs362.arrayManip.badResize([II)V: I7 Branch 8 IFGE L54 - false
   * Goal 4. Branch edu.osu.cs362.arrayManip.badResize([II)V: I7 Branch 8 IFGE L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 5. Branch edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 6. Branch edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 7. badResize([II)V_java.lang.AssertionError_EXPLICIT
   * Goal 8. edu.osu.cs362.arrayManip.badResize([II)V: Line 54
   * Goal 9. [METHOD] edu.osu.cs362.arrayManip.badResize([II)V
   * Goal 10. Weak Mutation 218: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation
   * Goal 11. Weak Mutation 219: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != -> ==
   * Goal 12. Weak Mutation 220: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != null -> = null
   * Goal 13. Weak Mutation 221: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation of newSize
   * Goal 14. Weak Mutation 222: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp IINC 1 newSize
   * Goal 15. Weak Mutation 223: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp IINC -1 newSize
   * Goal 16. Weak Mutation 224: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator >= -> -1
   * Goal 17. Weak Mutation 227: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.badResize((int[]) null, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 19
  /*
   * 14 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false
   * Goal 2. edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - true
   * Goal 3. Branch edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - true in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 4. Branch edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 5. badResize([II)V_java.lang.NegativeArraySizeException_IMPLICIT
   * Goal 6. edu.osu.cs362.arrayManip.badResize([II)V: Line 54
   * Goal 7. edu.osu.cs362.arrayManip.badResize([II)V: Line 56
   * Goal 8. [METHOD] edu.osu.cs362.arrayManip.badResize([II)V
   * Goal 9. Weak Mutation 218: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation
   * Goal 10. Weak Mutation 219: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != -> ==
   * Goal 11. Weak Mutation 220: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != null -> = null
   * Goal 12. Weak Mutation 228: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp Negation of newSize
   * Goal 13. Weak Mutation 229: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC 1 newSize
   * Goal 14. Weak Mutation 230: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC -1 newSize
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        arrayManip.badResize(intArray0, (-1869));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("edu.osu.cs362.arrayManip", e);
      }
  }

  //Test case number: 20
  /*
   * 22 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false
   * Goal 2. edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - false
   * Goal 3. edu.osu.cs362.arrayManip.badResize([II)V: I7 Branch 8 IFGE L54 - true
   * Goal 4. Branch edu.osu.cs362.arrayManip.badResize([II)V: I7 Branch 8 IFGE L54 - true in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 5. Branch edu.osu.cs362.arrayManip.badResize([II)V: I5 Branch 7 IFNONNULL L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 6. Branch edu.osu.cs362.arrayManip.badResize([II)V: I3 Branch 6 IFNE L54 - false in context: edu.osu.cs362.arrayManip:badResize([II)V
   * Goal 7. badResize([II)V_java.lang.NullPointerException_IMPLICIT
   * Goal 8. edu.osu.cs362.arrayManip.badResize([II)V: Line 54
   * Goal 9. edu.osu.cs362.arrayManip.badResize([II)V: Line 56
   * Goal 10. edu.osu.cs362.arrayManip.badResize([II)V: Line 57
   * Goal 11. [METHOD] edu.osu.cs362.arrayManip.badResize([II)V
   * Goal 12. Weak Mutation 218: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation
   * Goal 13. Weak Mutation 219: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != -> ==
   * Goal 14. Weak Mutation 220: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator != null -> = null
   * Goal 15. Weak Mutation 221: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp Negation of newSize
   * Goal 16. Weak Mutation 222: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp IINC 1 newSize
   * Goal 17. Weak Mutation 223: edu.osu.cs362.arrayManip.badResize([II)V:54 - InsertUnaryOp IINC -1 newSize
   * Goal 18. Weak Mutation 226: edu.osu.cs362.arrayManip.badResize([II)V:54 - ReplaceComparisonOperator >= -> >
   * Goal 19. Weak Mutation 228: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp Negation of newSize
   * Goal 20. Weak Mutation 229: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC 1 newSize
   * Goal 21. Weak Mutation 230: edu.osu.cs362.arrayManip.badResize([II)V:56 - InsertUnaryOp IINC -1 newSize
   * Goal 22. Weak Mutation 231: edu.osu.cs362.arrayManip.badResize([II)V:57 - ReplaceVariable list -> temp
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.badResize((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("edu.osu.cs362.arrayManip", e);
      }
  }

  //Test case number: 21
  /*
   * 53 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false
   * Goal 2. edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - false
   * Goal 3. edu.osu.cs362.arrayManip.findMin([I)I: I8 Branch 3 IFGT L34 - true
   * Goal 4. edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - true
   * Goal 5. edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - false
   * Goal 6. edu.osu.cs362.arrayManip.findMin([I)I: I36 Branch 5 IF_ICMPGE L38 - true
   * Goal 7. edu.osu.cs362.arrayManip.findMin([I)I: I36 Branch 5 IF_ICMPGE L38 - false
   * Goal 8. Branch edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 9. Branch edu.osu.cs362.arrayManip.findMin([I)I: I8 Branch 3 IFGT L34 - true in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 10. Branch edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 11. Branch edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - true in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 12. Branch edu.osu.cs362.arrayManip.findMin([I)I: I27 Branch 4 IF_ICMPGE L37 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 13. Branch edu.osu.cs362.arrayManip.findMin([I)I: I36 Branch 5 IF_ICMPGE L38 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 14. Branch edu.osu.cs362.arrayManip.findMin([I)I: I36 Branch 5 IF_ICMPGE L38 - true in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 15. [Output]: edu.osu.cs362.arrayManip.findMin([I)I:Positive
   * Goal 16. edu.osu.cs362.arrayManip.findMin([I)I: Line 34
   * Goal 17. edu.osu.cs362.arrayManip.findMin([I)I: Line 36
   * Goal 18. edu.osu.cs362.arrayManip.findMin([I)I: Line 37
   * Goal 19. edu.osu.cs362.arrayManip.findMin([I)I: Line 38
   * Goal 20. edu.osu.cs362.arrayManip.findMin([I)I: Line 39
   * Goal 21. edu.osu.cs362.arrayManip.findMin([I)I: Line 43
   * Goal 22. [METHOD] edu.osu.cs362.arrayManip.findMin([I)I
   * Goal 23. [METHODNOEX] edu.osu.cs362.arrayManip.findMin([I)I
   * Goal 24. Weak Mutation 183: edu.osu.cs362.arrayManip.findMin([I)I:34 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 184: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator != -> ==
   * Goal 26. Weak Mutation 185: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator = null -> != null
   * Goal 27. Weak Mutation 186: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator > -> -2
   * Goal 28. Weak Mutation 190: edu.osu.cs362.arrayManip.findMin([I)I:36 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 191: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceConstant - 1 -> 0
   * Goal 30. Weak Mutation 192: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceVariable i -> indexOfMin
   * Goal 31. Weak Mutation 193: edu.osu.cs362.arrayManip.findMin([I)I:37 - InsertUnaryOp Negation of i
   * Goal 32. Weak Mutation 194: edu.osu.cs362.arrayManip.findMin([I)I:37 - InsertUnaryOp IINC 1 i
   * Goal 33. Weak Mutation 195: edu.osu.cs362.arrayManip.findMin([I)I:37 - InsertUnaryOp IINC -1 i
   * Goal 34. Weak Mutation 196: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceComparisonOperator >= -> -1
   * Goal 35. Weak Mutation 197: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceComparisonOperator >= -> >
   * Goal 36. Weak Mutation 214: edu.osu.cs362.arrayManip.findMin([I)I:37 - ReplaceVariable i -> indexOfMin
   * Goal 37. Weak Mutation 199: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceVariable i -> indexOfMin
   * Goal 38. Weak Mutation 200: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp Negation of i
   * Goal 39. Weak Mutation 201: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC 1 i
   * Goal 40. Weak Mutation 202: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC -1 i
   * Goal 41. Weak Mutation 203: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceVariable indexOfMin -> i
   * Goal 42. Weak Mutation 204: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp Negation of indexOfMin
   * Goal 43. Weak Mutation 205: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC 1 indexOfMin
   * Goal 44. Weak Mutation 206: edu.osu.cs362.arrayManip.findMin([I)I:38 - InsertUnaryOp IINC -1 indexOfMin
   * Goal 45. Weak Mutation 207: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceComparisonOperator >= -> -1
   * Goal 46. Weak Mutation 208: edu.osu.cs362.arrayManip.findMin([I)I:38 - ReplaceComparisonOperator >= -> >
   * Goal 47. Weak Mutation 210: edu.osu.cs362.arrayManip.findMin([I)I:39 - ReplaceVariable i -> indexOfMin
   * Goal 48. Weak Mutation 211: edu.osu.cs362.arrayManip.findMin([I)I:39 - InsertUnaryOp Negation of i
   * Goal 49. Weak Mutation 212: edu.osu.cs362.arrayManip.findMin([I)I:39 - InsertUnaryOp IINC 1 i
   * Goal 50. Weak Mutation 213: edu.osu.cs362.arrayManip.findMin([I)I:39 - InsertUnaryOp IINC -1 i
   * Goal 51. Weak Mutation 215: edu.osu.cs362.arrayManip.findMin([I)I:43 - InsertUnaryOp Negation of indexOfMin
   * Goal 52. Weak Mutation 216: edu.osu.cs362.arrayManip.findMin([I)I:43 - InsertUnaryOp IINC 1 indexOfMin
   * Goal 53. Weak Mutation 217: edu.osu.cs362.arrayManip.findMin([I)I:43 - InsertUnaryOp IINC -1 indexOfMin
   */

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1092;
      int int0 = arrayManip.findMin(intArray0);
      assertEquals(1, int0);
  }

  //Test case number: 22
  /*
   * 14 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false
   * Goal 2. edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - false
   * Goal 3. edu.osu.cs362.arrayManip.findMin([I)I: I8 Branch 3 IFGT L34 - false
   * Goal 4. Branch edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 5. Branch edu.osu.cs362.arrayManip.findMin([I)I: I8 Branch 3 IFGT L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 6. Branch edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 7. findMin([I)I_java.lang.AssertionError_EXPLICIT
   * Goal 8. edu.osu.cs362.arrayManip.findMin([I)I: Line 34
   * Goal 9. [METHOD] edu.osu.cs362.arrayManip.findMin([I)I
   * Goal 10. Weak Mutation 183: edu.osu.cs362.arrayManip.findMin([I)I:34 - InsertUnaryOp Negation
   * Goal 11. Weak Mutation 184: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator != -> ==
   * Goal 12. Weak Mutation 185: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator = null -> != null
   * Goal 13. Weak Mutation 188: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator > -> >=
   * Goal 14. Weak Mutation 189: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        arrayManip.findMin(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 23
  /*
   * 11 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false
   * Goal 2. edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - true
   * Goal 3. Branch edu.osu.cs362.arrayManip.findMin([I)I: I3 Branch 1 IFNE L34 - false in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 4. Branch edu.osu.cs362.arrayManip.findMin([I)I: I5 Branch 2 IFNULL L34 - true in context: edu.osu.cs362.arrayManip:findMin([I)I
   * Goal 5. findMin([I)I_java.lang.AssertionError_EXPLICIT
   * Goal 6. edu.osu.cs362.arrayManip.findMin([I)I: Line 34
   * Goal 7. [METHOD] edu.osu.cs362.arrayManip.findMin([I)I
   * Goal 8. Weak Mutation 183: edu.osu.cs362.arrayManip.findMin([I)I:34 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 184: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 185: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceComparisonOperator = null -> != null
   * Goal 11. Weak Mutation 189: edu.osu.cs362.arrayManip.findMin([I)I:34 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        arrayManip.findMin((int[]) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 24
  /*
   * 219 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V: root-Branch
   * Goal 2. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I3 Branch 14 IFNE L96 - false
   * Goal 3. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I5 Branch 15 IFNONNULL L96 - true
   * Goal 4. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - true
   * Goal 5. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I19 Branch 16 IF_ICMPGE L98 - false
   * Goal 6. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - true
   * Goal 7. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I30 Branch 17 IF_ICMPGE L99 - false
   * Goal 8. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - true
   * Goal 9. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: I41 Branch 18 IF_ICMPNE L100 - false
   * Goal 10. edu.osu.cs362.arrayManip.bubblesort([I)V: I3 Branch 19 IFNE L115 - false
   * Goal 11. edu.osu.cs362.arrayManip.bubblesort([I)V: I5 Branch 20 IFNONNULL L115 - true
   * Goal 12. edu.osu.cs362.arrayManip.bubblesort([I)V: I23 Branch 21 IF_ICMPGE L119 - false
   * Goal 13. edu.osu.cs362.arrayManip.bubblesort([I)V: I25 Branch 22 IFEQ L119 - false
   * Goal 14. edu.osu.cs362.arrayManip.bubblesort([I)V: I42 Branch 23 IF_ICMPGE L121 - false
   * Goal 15. edu.osu.cs362.arrayManip.bubblesort([I)V: I46 Branch 24 IFNE L122 - false
   * Goal 16. edu.osu.cs362.arrayManip.bubblesort([I)V: I48 Branch 25 IFLE L122 - true
   * Goal 17. Branch edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V: root-Branch in context: edu.osu.cs362.arrayManip:main([Ljava/lang/String;)V
   * Goal 18. main([Ljava/lang/String;)V_java.lang.AssertionError_EXPLICIT
   * Goal 19. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 115
   * Goal 20. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 118
   * Goal 21. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 119
   * Goal 22. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 120
   * Goal 23. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 121
   * Goal 24. edu.osu.cs362.arrayManip.bubblesort([I)V: Line 122
   * Goal 25. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 96
   * Goal 26. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 98
   * Goal 27. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 99
   * Goal 28. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 100
   * Goal 29. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 101
   * Goal 30. edu.osu.cs362.arrayManip.findAndPrintPairs([II)V: Line 106
   * Goal 31. edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V: Line 12
   * Goal 32. edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V: Line 13
   * Goal 33. edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V: Line 14
   * Goal 34. [METHOD] edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V
   * Goal 35. Weak Mutation 0: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 7 -> 0
   * Goal 36. Weak Mutation 1: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 7 -> 1
   * Goal 37. Weak Mutation 2: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 7 -> -1
   * Goal 38. Weak Mutation 3: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 7 -> 6
   * Goal 39. Weak Mutation 4: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 7 -> 8
   * Goal 40. Weak Mutation 5: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 0 -> 1
   * Goal 41. Weak Mutation 6: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 42. Weak Mutation 7: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 43. Weak Mutation 8: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 0
   * Goal 44. Weak Mutation 9: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 1
   * Goal 45. Weak Mutation 10: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> -1
   * Goal 46. Weak Mutation 11: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 3
   * Goal 47. Weak Mutation 12: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 0
   * Goal 48. Weak Mutation 13: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 1
   * Goal 49. Weak Mutation 14: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> -1
   * Goal 50. Weak Mutation 15: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 3
   * Goal 51. Weak Mutation 16: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 0
   * Goal 52. Weak Mutation 17: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 1
   * Goal 53. Weak Mutation 18: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> -1
   * Goal 54. Weak Mutation 19: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 2
   * Goal 55. Weak Mutation 20: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 4
   * Goal 56. Weak Mutation 21: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 0
   * Goal 57. Weak Mutation 22: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 1
   * Goal 58. Weak Mutation 23: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> -1
   * Goal 59. Weak Mutation 24: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 2
   * Goal 60. Weak Mutation 25: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 4
   * Goal 61. Weak Mutation 26: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 0
   * Goal 62. Weak Mutation 27: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 1
   * Goal 63. Weak Mutation 28: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> -1
   * Goal 64. Weak Mutation 29: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 3
   * Goal 65. Weak Mutation 30: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 5
   * Goal 66. Weak Mutation 31: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 0
   * Goal 67. Weak Mutation 32: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 1
   * Goal 68. Weak Mutation 33: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> -1
   * Goal 69. Weak Mutation 34: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 3
   * Goal 70. Weak Mutation 35: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 4 -> 5
   * Goal 71. Weak Mutation 36: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 72. Weak Mutation 37: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 5 -> 0
   * Goal 73. Weak Mutation 38: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 5 -> 1
   * Goal 74. Weak Mutation 39: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 5 -> -1
   * Goal 75. Weak Mutation 40: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 5 -> 4
   * Goal 76. Weak Mutation 41: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 5 -> 6
   * Goal 77. Weak Mutation 42: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 0
   * Goal 78. Weak Mutation 43: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 1
   * Goal 79. Weak Mutation 44: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> -1
   * Goal 80. Weak Mutation 45: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 2 -> 3
   * Goal 81. Weak Mutation 46: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 6 -> 0
   * Goal 82. Weak Mutation 47: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 6 -> 1
   * Goal 83. Weak Mutation 48: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 6 -> -1
   * Goal 84. Weak Mutation 49: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 6 -> 5
   * Goal 85. Weak Mutation 50: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 6 -> 7
   * Goal 86. Weak Mutation 51: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 0
   * Goal 87. Weak Mutation 52: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 1
   * Goal 88. Weak Mutation 53: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> -1
   * Goal 89. Weak Mutation 54: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 2
   * Goal 90. Weak Mutation 55: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:12 - ReplaceConstant - 3 -> 4
   * Goal 91. Weak Mutation 56: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:13 - ReplaceConstant - 5 -> 0
   * Goal 92. Weak Mutation 57: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:13 - ReplaceConstant - 5 -> 1
   * Goal 93. Weak Mutation 58: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:13 - ReplaceConstant - 5 -> -1
   * Goal 94. Weak Mutation 59: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:13 - ReplaceConstant - 5 -> 4
   * Goal 95. Weak Mutation 60: edu.osu.cs362.arrayManip.main([Ljava/lang/String;)V:13 - ReplaceConstant - 5 -> 6
   * Goal 96. Weak Mutation 309: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 310: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != -> ==
   * Goal 98. Weak Mutation 311: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:96 - ReplaceComparisonOperator != null -> = null
   * Goal 99. Weak Mutation 313: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 0
   * Goal 100. Weak Mutation 314: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 1
   * Goal 101. Weak Mutation 315: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> -1
   * Goal 102. Weak Mutation 316: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceConstant - 2 -> 3
   * Goal 103. Weak Mutation 317: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceVariable i -> target
   * Goal 104. Weak Mutation 318: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp Negation of i
   * Goal 105. Weak Mutation 319: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC 1 i
   * Goal 106. Weak Mutation 320: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - InsertUnaryOp IINC -1 i
   * Goal 107. Weak Mutation 321: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceComparisonOperator >= -> -1
   * Goal 108. Weak Mutation 322: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceComparisonOperator >= -> >
   * Goal 109. Weak Mutation 395: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:98 - ReplaceVariable i -> target
   * Goal 110. Weak Mutation 324: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable i -> target
   * Goal 111. Weak Mutation 325: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp Negation of i
   * Goal 112. Weak Mutation 326: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC 1 i
   * Goal 113. Weak Mutation 327: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC -1 i
   * Goal 114. Weak Mutation 328: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceConstant - 1 -> 0
   * Goal 115. Weak Mutation 329: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> %
   * Goal 116. Weak Mutation 330: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> -
   * Goal 117. Weak Mutation 331: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> *
   * Goal 118. Weak Mutation 332: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceArithmeticOperator + -> /
   * Goal 119. Weak Mutation 333: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> i
   * Goal 120. Weak Mutation 334: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> target
   * Goal 121. Weak Mutation 335: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp Negation of j
   * Goal 122. Weak Mutation 336: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC 1 j
   * Goal 123. Weak Mutation 337: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - InsertUnaryOp IINC -1 j
   * Goal 124. Weak Mutation 338: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceComparisonOperator >= -> -1
   * Goal 125. Weak Mutation 339: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceComparisonOperator >= -> >
   * Goal 126. Weak Mutation 393: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> i
   * Goal 127. Weak Mutation 394: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:99 - ReplaceVariable j -> target
   * Goal 128. Weak Mutation 341: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable i -> j
   * Goal 129. Weak Mutation 342: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable i -> target
   * Goal 130. Weak Mutation 343: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of i
   * Goal 131. Weak Mutation 344: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 i
   * Goal 132. Weak Mutation 345: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 i
   * Goal 133. Weak Mutation 346: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable j -> i
   * Goal 134. Weak Mutation 347: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable j -> target
   * Goal 135. Weak Mutation 348: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of j
   * Goal 136. Weak Mutation 349: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 j
   * Goal 137. Weak Mutation 350: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 j
   * Goal 138. Weak Mutation 351: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> %
   * Goal 139. Weak Mutation 352: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> -
   * Goal 140. Weak Mutation 353: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> *
   * Goal 141. Weak Mutation 354: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceArithmeticOperator + -> /
   * Goal 142. Weak Mutation 355: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable target -> i
   * Goal 143. Weak Mutation 356: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceVariable target -> j
   * Goal 144. Weak Mutation 357: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp Negation of target
   * Goal 145. Weak Mutation 358: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC 1 target
   * Goal 146. Weak Mutation 359: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - InsertUnaryOp IINC -1 target
   * Goal 147. Weak Mutation 360: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceComparisonOperator != -> -1
   * Goal 148. Weak Mutation 361: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceComparisonOperator != -> <
   * Goal 149. Weak Mutation 362: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:100 - ReplaceComparisonOperator != -> >
   * Goal 150. Weak Mutation 363: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant - The two elements at indices  -> 
   * Goal 151. Weak Mutation 364: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> j
   * Goal 152. Weak Mutation 365: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> target
   * Goal 153. Weak Mutation 366: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of i
   * Goal 154. Weak Mutation 367: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 i
   * Goal 155. Weak Mutation 368: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 i
   * Goal 156. Weak Mutation 369: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  and  -> 
   * Goal 157. Weak Mutation 370: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> i
   * Goal 158. Weak Mutation 371: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> target
   * Goal 159. Weak Mutation 372: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of j
   * Goal 160. Weak Mutation 373: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 j
   * Goal 161. Weak Mutation 374: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 j
   * Goal 162. Weak Mutation 375: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  are  -> 
   * Goal 163. Weak Mutation 376: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> j
   * Goal 164. Weak Mutation 377: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable i -> target
   * Goal 165. Weak Mutation 378: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of i
   * Goal 166. Weak Mutation 379: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 i
   * Goal 167. Weak Mutation 380: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 i
   * Goal 168. Weak Mutation 381: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  and  -> 
   * Goal 169. Weak Mutation 382: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> i
   * Goal 170. Weak Mutation 383: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable j -> target
   * Goal 171. Weak Mutation 384: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of j
   * Goal 172. Weak Mutation 385: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 j
   * Goal 173. Weak Mutation 386: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 j
   * Goal 174. Weak Mutation 387: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceConstant -  add up to  -> 
   * Goal 175. Weak Mutation 388: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable target -> i
   * Goal 176. Weak Mutation 389: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - ReplaceVariable target -> j
   * Goal 177. Weak Mutation 390: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp Negation of target
   * Goal 178. Weak Mutation 391: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC 1 target
   * Goal 179. Weak Mutation 392: edu.osu.cs362.arrayManip.findAndPrintPairs([II)V:101 - InsertUnaryOp IINC -1 target
   * Goal 180. Weak Mutation 396: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - InsertUnaryOp Negation
   * Goal 181. Weak Mutation 397: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != -> ==
   * Goal 182. Weak Mutation 398: edu.osu.cs362.arrayManip.bubblesort([I)V:115 - ReplaceComparisonOperator != null -> = null
   * Goal 183. Weak Mutation 400: edu.osu.cs362.arrayManip.bubblesort([I)V:118 - ReplaceConstant - 1 -> 0
   * Goal 184. Weak Mutation 401: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceConstant - 0 -> 1
   * Goal 185. Weak Mutation 402: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp Negation of i
   * Goal 186. Weak Mutation 403: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC 1 i
   * Goal 187. Weak Mutation 404: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC -1 i
   * Goal 188. Weak Mutation 405: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator >= -> -1
   * Goal 189. Weak Mutation 408: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp Negation of changed
   * Goal 190. Weak Mutation 409: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC 1 changed
   * Goal 191. Weak Mutation 410: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - InsertUnaryOp IINC -1 changed
   * Goal 192. Weak Mutation 411: edu.osu.cs362.arrayManip.bubblesort([I)V:119 - ReplaceComparisonOperator == -> !=
   * Goal 193. Weak Mutation 412: edu.osu.cs362.arrayManip.bubblesort([I)V:120 - ReplaceConstant - 0 -> 1
   * Goal 194. Weak Mutation 413: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceConstant - 0 -> 1
   * Goal 195. Weak Mutation 415: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp Negation of j
   * Goal 196. Weak Mutation 416: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC 1 j
   * Goal 197. Weak Mutation 417: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC -1 j
   * Goal 198. Weak Mutation 419: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp Negation of i
   * Goal 199. Weak Mutation 420: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC 1 i
   * Goal 200. Weak Mutation 421: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - InsertUnaryOp IINC -1 i
   * Goal 201. Weak Mutation 423: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> %
   * Goal 202. Weak Mutation 425: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> /
   * Goal 203. Weak Mutation 426: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceConstant - 1 -> 0
   * Goal 204. Weak Mutation 427: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> +
   * Goal 205. Weak Mutation 428: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> %
   * Goal 206. Weak Mutation 429: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> *
   * Goal 207. Weak Mutation 430: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceArithmeticOperator - -> /
   * Goal 208. Weak Mutation 431: edu.osu.cs362.arrayManip.bubblesort([I)V:121 - ReplaceComparisonOperator >= -> -1
   * Goal 209. Weak Mutation 434: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp Negation
   * Goal 210. Weak Mutation 435: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceComparisonOperator != -> ==
   * Goal 211. Weak Mutation 437: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp Negation of j
   * Goal 212. Weak Mutation 438: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC 1 j
   * Goal 213. Weak Mutation 439: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC -1 j
   * Goal 214. Weak Mutation 442: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceComparisonOperator <= -> <
   * Goal 215. Weak Mutation 455: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceConstant - loop counter j  -> 
   * Goal 216. Weak Mutation 457: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp Negation of j
   * Goal 217. Weak Mutation 458: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC 1 j
   * Goal 218. Weak Mutation 459: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - InsertUnaryOp IINC -1 j
   * Goal 219. Weak Mutation 460: edu.osu.cs362.arrayManip.bubblesort([I)V:122 - ReplaceConstant - is out of bounds. -> 
   */

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        arrayManip.main(stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // loop counter j 0is out of bounds.
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * Goal 1. edu.osu.cs362.arrayManip.<init>()V: root-Branch
   * Goal 2. Branch edu.osu.cs362.arrayManip.<init>()V: root-Branch in context: edu.osu.cs362.arrayManip:<init>()V
   * Goal 3. [METHOD] edu.osu.cs362.arrayManip.<init>()V
   * Goal 4. [METHODNOEX] edu.osu.cs362.arrayManip.<init>()V
   */

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      arrayManip arrayManip0 = new arrayManip();
  }
}
